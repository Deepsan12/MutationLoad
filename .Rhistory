z = M1,
type = "contour"
)
fig
10^seq(-3,-2)
10^seq(-2,-1)
10^seq(-4,-2)
10^seq(-4,-2, -1)
10^seq(-4,-2, 1)
10^seq(-4,-2, .1)
log10(0.0001000000 )
log10(0.0001258925)
10^seq(-4,-2)
10^seq(-4,-1)
10^seq(-4,-2)
10^seq(-4,-2.5)
10^seq(-4,-2)
10^seq(-4,-1.5)
10^seq(-4,-1)
10^seq(-4,-2)
10^seq(-3,-2)
flux_sim_sb_0.002 <- data.frame("N" = c(700,800,900,1000,1100, 1200),
"delf" = c(0.0002342277, 0.0002069930, 0.0001769691, 0.0001618280,
0.0001460149,0.0001320459),
"benf" = c(0.0000753573,0.0000943113,0.0001023671,0.0001187022,
0.0001241141,0.0001358045))
flux_sim_sb_0.004 <- data.frame("N" = c(400,500,600,700,800, 900),
"delf" = c(0.0004116249, 0.0003364481, 0.0002824124, 0.0002290653,
0.0002071196,0.0001790320),
"benf" = c(0.0002028060,0.0002281810,0.0002825984,0.0003252260,
0.0003465994,0.0004202803))
flux_sim_sb_0.008 <- data.frame("N" = c(200,300,400,500,600,700),
"delf" = c(0.0008761119, 0.0005951607, 0.0004374721, 0.0003393053,
0.0002842606,0.0002498480),
"benf" = c(0.0003435709,0.0005450489,0.0007150669,0.0009169896,
0.0011363158,0.0012798791))
flux_sim_0.016 <- data.frame("N" = c(100,150,200,250,300,350),
"delf" = c(0.0017776497, 0.0012567256, 0.0009043413, 0.0007322552,
0.0006115324,0.0005318247),
"benf" = c(0.0005900066,0.0011147069,0.0012911635,0.0018375238,
0.0022001508,0.0026153327))
#####smoothing####
fPow1 <- function(x, a, b) {a * x^b}
fPow2<- function(x, a, b) {a * x + b}
est1 <- coef(nls(delf ~ fPow1(N, a, b),
start=c(a=.00001, b=.00001), data=flux_sim_sb_0.002))
nlfit1 <- nls(delf ~ fPow1(N, a, b),
start=est1, data=flux_sim_sb_0.002)
est2 <- coef(nls(benf ~ fPow2(N, a, b),
start=c(a=.00001, b=.00001), data=flux_sim_sb_0.002))
nlfit2 <- nls(benf ~ fPow2(N, a, b),
start=est2, data=flux_sim_sb_0.002)
d2 <- data.frame(N = seq(700, 1500, by = 1))
expected1 <- predict(nlfit1, d2)
expected2 <- predict(nlfit2, d2)
d2 <- data.frame(d2, expected1, expected2)
#get Ncrit
f1 <- approxfun(d2$expected1 - d2$expected2, d2$N, rule=2)
f1(0)
dg_link <- function(N,epsilon) {return((-d2[which(d2$N == N+epsilon),2] + d2[which(d2$N == N-epsilon),2])/2*epsilon)}
df_link <- function(N,epsilon) {return((d2[which(d2$N == N+epsilon),3] - d2[which(d2$N == N-epsilon),3])/2*epsilon)}
#ratio at ncrit with linkage
ratio_link <- df_link(1179, 20)/dg_link(1179, 20)
ratio_link
#ratio at ncrit with linkage
ratio_link <- df_link(1179, 10)/dg_link(1179, 10)
ratio_link
#ratio at ncrit with linkage
ratio_link <- df_link(1179, 30)/dg_link(1179, 30)
ratio_link
flux_sim_sb_0.004 <- data.frame("N" = c(400,500,600,700,800, 900),
"delf" = c(0.0004116249, 0.0003364481, 0.0002824124, 0.0002290653,
0.0002071196,0.0001790320),
"benf" = c(0.0002028060,0.0002281810,0.0002825984,0.0003252260,
0.0003465994,0.0004202803))
#####smoothing####
fPow1 <- function(x, a, b) {a * x^b}
fPow2<- function(x, a, b) {a * x + b}
est1 <- coef(nls(delf ~ fPow1(N, a, b),
start=c(a=.00001, b=.00001), data=flux_sim_sb_0.004))
nlfit1 <- nls(delf ~ fPow1(N, a, b),
start=est1, data=flux_sim_sb_0.004)
est2 <- coef(nls(benf ~ fPow2(N, a, b),
start=c(a=.00001, b=.00001), data=flux_sim_sb_0.004))
nlfit2 <- nls(benf ~ fPow2(N, a, b),
start=est2, data=flux_sim_sb_0.004)
d2 <- data.frame(N = seq(400, 1000, by = 1))
expected1 <- predict(nlfit1, d2)
expected2 <- predict(nlfit2, d2)
d2 <- data.frame(d2, expected1, expected2)
#get Ncrit
f1 <- approxfun(d2$expected1 - d2$expected2, d2$N, rule=2)
f1(0)
dg_link <- function(N,epsilon) {return((-d2[which(d2$N == N+epsilon),2] + d2[which(d2$N == N-epsilon),2])/2*epsilon)}
df_link <- function(N,epsilon) {return((d2[which(d2$N == N+epsilon),3] - d2[which(d2$N == N-epsilon),3])/2*epsilon)}
#ratio at ncrit with linkage
ratio_link <- df_link(595, 20)/dg_link(595, 20)
ratio_link
flux_sim_sb_0.008 <- data.frame("N" = c(200,300,400,500,600,700),
"delf" = c(0.0008761119, 0.0005951607, 0.0004374721, 0.0003393053,
0.0002842606,0.0002498480),
"benf" = c(0.0003435709,0.0005450489,0.0007150669,0.0009169896,
0.0011363158,0.0012798791))
#####smoothing####
fPow1 <- function(x, a, b) {a * x^b}
fPow2<- function(x, a, b) {a * x + b}
est1 <- coef(nls(delf ~ fPow1(N, a, b),
start=c(a=.00001, b=.00001), data=flux_sim_sb_0.008))
nlfit1 <- nls(delf ~ fPow1(N, a, b),
start=est1, data=flux_sim_sb_0.008)
est1 <- coef(nls(delf ~ fPow1(N, a, b),
start=c(a=.00005, b=.00005), data=flux_sim_sb_0.008))
nlfit1 <- nls(delf ~ fPow1(N, a, b),
start=est1, data=flux_sim_sb_0.008)
est2 <- coef(nls(benf ~ fPow2(N, a, b),
start=c(a=.00001, b=.00001), data=flux_sim_sb_0.008))
nlfit2 <- nls(benf ~ fPow2(N, a, b),
start=est2, data=flux_sim_sb_0.008)
d2 <- data.frame(N = seq(200, 1000, by = 1))
expected1 <- predict(nlfit1, d2)
expected2 <- predict(nlfit2, d2)
d2 <- data.frame(d2, expected1, expected2)
#get Ncrit
f1 <- approxfun(d2$expected1 - d2$expected2, d2$N, rule=2)
f1(0)
dg_link <- function(N,epsilon) {return((-d2[which(d2$N == N+epsilon),2] + d2[which(d2$N == N-epsilon),2])/2*epsilon)}
df_link <- function(N,epsilon) {return((d2[which(d2$N == N+epsilon),3] - d2[which(d2$N == N-epsilon),3])/2*epsilon)}
#ratio at ncrit with linkage
ratio_link <- df_link(312, 20)/dg_link(312,20)
ratio_link
flux_sim_0.016 <- data.frame("N" = c(100,150,200,250,300,350),
"delf" = c(0.0017776497, 0.0012567256, 0.0009043413, 0.0007322552,
0.0006115324,0.0005318247),
"benf" = c(0.0005900066,0.0011147069,0.0012911635,0.0018375238,
0.0022001508,0.0026153327))
#####smoothing####
fPow1 <- function(x, a, b) {a * x^b}
fPow2<- function(x, a, b) {a * x + b}
est1 <- coef(nls(delf ~ fPow1(N, a, b),
start=c(a=.00005, b=.00005), data=flux_sim_sb_0.008))
nlfit1 <- nls(delf ~ fPow1(N, a, b),
start=est1, data=flux_sim_sb_0.008)
est2 <- coef(nls(benf ~ fPow2(N, a, b),
start=c(a=.00001, b=.00001), data=flux_sim_sb_0.008))
nlfit2 <- nls(benf ~ fPow2(N, a, b),
start=est2, data=flux_sim_sb_0.008)
d2 <- data.frame(N = seq(100, 400, by = 1))
expected1 <- predict(nlfit1, d2)
expected2 <- predict(nlfit2, d2)
d2 <- data.frame(d2, expected1, expected2)
#get Ncrit
f1 <- approxfun(d2$expected1 - d2$expected2, d2$N, rule=2)
f1(0)
#####smoothing####
fPow1 <- function(x, a, b) {a * x^b}
fPow2<- function(x, a, b) {a * x + b}
est1 <- coef(nls(delf ~ fPow1(N, a, b),
start=c(a=.00005, b=.00005), data=flux_sim_0.016))
nlfit1 <- nls(delf ~ fPow1(N, a, b),
start=est1, data=flux_sim_0.016)
est2 <- coef(nls(benf ~ fPow2(N, a, b),
start=c(a=.00001, b=.00001), data=flux_sim_0.016))
nlfit2 <- nls(benf ~ fPow2(N, a, b),
start=est2, data=flux_sim_0.016)
d2 <- data.frame(N = seq(100, 400, by = 1))
expected1 <- predict(nlfit1, d2)
expected2 <- predict(nlfit2, d2)
d2 <- data.frame(d2, expected1, expected2)
#get Ncrit
f1 <- approxfun(d2$expected1 - d2$expected2, d2$N, rule=2)
f1(0)
dg_link <- function(N,epsilon) {return((-d2[which(d2$N == N+epsilon),2] + d2[which(d2$N == N-epsilon),2])/2*epsilon)}
df_link <- function(N,epsilon) {return((d2[which(d2$N == N+epsilon),3] - d2[which(d2$N == N-epsilon),3])/2*epsilon)}
#ratio at ncrit with linkage
ratio_link <- df_link(163, 20)/dg_link(163,20)
ratio_link
flux_sim_sb_0.004 <- data.frame("N" = c(400,500,600,700,800, 900),
"delf" = c(0.0004116249, 0.0003364481, 0.0002824124, 0.0002290653,
0.0002071196,0.0001790320),
"benf" = c(0.0002028060,0.0002281810,0.0002825984,0.0003252260,
0.0003465994,0.0004202803))
#####smoothing####
fPow1 <- function(x, a, b) {a * x^b}
fPow2<- function(x, a, b) {a * x + b}
est1 <- coef(nls(delf ~ fPow1(N, a, b),
start=c(a=.00005, b=.00005), data=flux_sim_sb_0.004))
nlfit1 <- nls(delf ~ fPow1(N, a, b),
start=est1, data=flux_sim_sb_0.004)
est2 <- coef(nls(benf ~ fPow2(N, a, b),
start=c(a=.00001, b=.00001), data=flux_sim_sb_0.004))
nlfit2 <- nls(benf ~ fPow2(N, a, b),
start=est2, data=flux_sim_sb_0.004)
d2 <- data.frame(N = seq(400, 700, by = 1))
expected1 <- predict(nlfit1, d2)
expected2 <- predict(nlfit2, d2)
d2 <- data.frame(d2, expected1, expected2)
#get Ncrit
f1 <- approxfun(d2$expected1 - d2$expected2, d2$N, rule=2)
f1(0)
dg_link <- function(N,epsilon) {return((-d2[which(d2$N == N+epsilon),2] + d2[which(d2$N == N-epsilon),2])/2*epsilon)}
df_link <- function(N,epsilon) {return((d2[which(d2$N == N+epsilon),3] - d2[which(d2$N == N-epsilon),3])/2*epsilon)}
#ratio at ncrit with linkage
ratio_link <- df_link(595, 20)/dg_link(595,20)
ratio_link
flux_sim_sb_0.002 <- data.frame("N" = c(700,800,900,1000,1100, 1200),
"delf" = c(0.0002342277, 0.0002069930, 0.0001769691, 0.0001618280,
0.0001460149,0.0001320459),
"benf" = c(0.0000753573,0.0000943113,0.0001023671,0.0001187022,
0.0001241141,0.0001358045))
flux_sim_sb_0.002 <- data.frame("N" = c(700,800,900,1000,1100, 1200),
"delf" = c(0.0002342277, 0.0002069930, 0.0001769691, 0.0001618280,
0.0001460149,0.0001320459),
"benf" = c(0.0000753573,0.0000943113,0.0001023671,0.0001187022,
0.0001241141,0.0001358045))
flux_sim_sb_0.004 <- data.frame("N" = c(400,500,600,700,800, 900),
"delf" = c(0.0004116249, 0.0003364481, 0.0002824124, 0.0002290653,
0.0002071196,0.0001790320),
"benf" = c(0.0002028060,0.0002281810,0.0002825984,0.0003252260,
0.0003465994,0.0004202803))
flux_sim_sb_0.008 <- data.frame("N" = c(200,300,400,500,600,700),
"delf" = c(0.0008761119, 0.0005951607, 0.0004374721, 0.0003393053,
0.0002842606,0.0002498480),
"benf" = c(0.0003435709,0.0005450489,0.0007150669,0.0009169896,
0.0011363158,0.0012798791))
flux_sim_0.016 <- data.frame("N" = c(100,150,200,250,300,350),
"delf" = c(0.0017776497, 0.0012567256, 0.0009043413, 0.0007322552,
0.0006115324,0.0005318247),
"benf" = c(0.0005900066,0.0011147069,0.0012911635,0.0018375238,
0.0022001508,0.0026153327))
#####smoothing####
fPow1 <- function(x, a, b) {a * x^b}
fPow2<- function(x, a, b) {a * x + b}
est1 <- coef(nls(delf ~ fPow1(N, a, b),
start=c(a=.00005, b=.00005), data=flux_sim_sb_0.002))
nlfit1 <- nls(delf ~ fPow1(N, a, b),
start=est1, data=flux_sim_sb_0.002)
est2 <- coef(nls(benf ~ fPow2(N, a, b),
start=c(a=.00001, b=.00001), data=flux_sim_sb_0.002))
nlfit2 <- nls(benf ~ fPow2(N, a, b),
start=est2, data=flux_sim_sb_0.002)
d2 <- data.frame(N = seq(400, 700, by = 1))
d2 <- data.frame(N = seq(800, 1400, by = 1))
expected1 <- predict(nlfit1, d2)
expected2 <- predict(nlfit2, d2)
d2 <- data.frame(d2, expected1, expected2)
#get Ncrit
f1 <- approxfun(d2$expected1 - d2$expected2, d2$N, rule=2)
f1(0)
dg_link <- function(N,epsilon) {return((-d2[which(d2$N == N+epsilon),2] + d2[which(d2$N == N-epsilon),2])/2*epsilon)}
df_link <- function(N,epsilon) {return((d2[which(d2$N == N+epsilon),3] - d2[which(d2$N == N-epsilon),3])/2*epsilon)}
#ratio at ncrit with linkage
ratio_link <- df_link(1179, 20)/dg_link(1179,20)
ratio_link
#ratio at ncrit with linkage
ratio_link <- df_link(1178, 20)/dg_link(1178,20)
ratio_link
flux_sim_sb_0.004 <- data.frame("N" = c(400,500,600,700,800, 900),
"delf" = c(0.0004116249, 0.0003364481, 0.0002824124, 0.0002290653,
0.0002071196,0.0001790320),
"benf" = c(0.0002028060,0.0002281810,0.0002825984,0.0003252260,
0.0003465994,0.0004202803))
#####smoothing####
fPow1 <- function(x, a, b) {a * x^b}
fPow2<- function(x, a, b) {a * x + b}
est1 <- coef(nls(delf ~ fPow1(N, a, b),
start=c(a=.00005, b=.00005), data=flux_sim_sb_0.004))
nlfit1 <- nls(delf ~ fPow1(N, a, b),
start=est1, data=flux_sim_sb_0.004)
est2 <- coef(nls(benf ~ fPow2(N, a, b),
start=c(a=.00001, b=.00001), data=flux_sim_sb_0.004))
nlfit2 <- nls(benf ~ fPow2(N, a, b),
start=est2, data=flux_sim_sb_0.004)
d2 <- data.frame(N = seq(400, 900, by = 1))
expected1 <- predict(nlfit1, d2)
expected2 <- predict(nlfit2, d2)
d2 <- data.frame(d2, expected1, expected2)
#get Ncrit
f1 <- approxfun(d2$expected1 - d2$expected2, d2$N, rule=2)
f1(0)
dg_link <- function(N,epsilon) {return((-d2[which(d2$N == N+epsilon),2] + d2[which(d2$N == N-epsilon),2])/2*epsilon)}
df_link <- function(N,epsilon) {return((d2[which(d2$N == N+epsilon),3] - d2[which(d2$N == N-epsilon),3])/2*epsilon)}
#ratio at ncrit with linkage
ratio_link <- df_link(595, 20)/dg_link(595,20)
ratio_link
#ratio at ncrit with linkage
ratio_link <- df_link(595, 30)/dg_link(595,30)
ratio_link
#ratio at ncrit with linkage
ratio_link <- df_link(595, 10)/dg_link(595,10)
ratio_link
#ratio at ncrit with linkage
ratio_link <- df_link(596, 10)/dg_link(596,10)
ratio_link
10^-3
2*10^-3
10^-2
10^-1
flux_sim_plot
str(flux_sim_plot)
flux_sim_plot$data
flux_sim_plot$data[1]
flux_sim_plot$data[1,]
######simple linkage effect#######
df <- as.data.frame("ratio" = c(0.85362, 0.9772939))
######simple linkage effect#######
df <- as.data.frame("ratio" = c(0.85362, 0.9772939))
df$model <- factor(c("No Linkage", "Linkage"),
levels = c("No Linkage", "Linkage"))
######simple linkage effect#######
df <- as.data.frame("ratio" = c(0.85362, 0.9772939))
######simple linkage effect#######
df <- data.frame("ratio" = c(0.85362, 0.9772939))
df$model <- factor(c("No Linkage", "Linkage"),
levels = c("No Linkage", "Linkage"))
tiff("sens_ratio_simple.tiff", units="in", width=5, height=5, res=300)
flux_sim_plot <- ggplot(df, aes(x = model, y = ratio))+
geom_point()+geom_line(intercept = 0, slope = 1, linetype="dashed")+
annotate("text", x=0.98, y=1.2, label= expression(U[d]~"= 2"~s[b]~"= 0.03"))+
annotate("text", x=0.98, y=0.96, label= "1:1 ratio",angle=20)+
labs(x= "Model", y = expression("Sensitivity ratio at "~N[crit]))+
lims(y=c(0.8, 1))+theme_Publication()+theme(text = element_text(size = 16))
flux_sim_plot
dev.off()
dev.off()
tiff("sens_ratio_simple.tiff", units="in", width=5, height=5, res=300)
flux_sim_plot <- ggplot(df, aes(x = model, y = ratio))+
geom_point()+geom_hline(intercept = 1, linetype="dashed")+
annotate("text", x=0.98, y=1.2, label= expression(U[d]~"= 2"~s[b]~"= 0.03"))+
annotate("text", x=0.98, y=0.96, label= "1:1 ratio",angle=20)+
labs(x= "Model", y = expression("Sensitivity ratio at "~N[crit]))+
lims(y=c(0.8, 1))+theme_Publication()+theme(text = element_text(size = 16))
flux_sim_plot
dev.off()
tiff("sens_ratio_simple.tiff", units="in", width=5, height=5, res=300)
flux_sim_plot <- ggplot(df, aes(x = model, y = ratio))+
geom_point()+geom_hline(yintercept = 1, linetype="dashed")+
annotate("text", x=0.98, y=1.2, label= expression(U[d]~"= 2"~s[b]~"= 0.03"))+
annotate("text", x=0.98, y=0.96, label= "1:1 ratio",angle=20)+
labs(x= "Model", y = expression("Sensitivity ratio at "~N[crit]))+
lims(y=c(0.8, 1))+theme_Publication()+theme(text = element_text(size = 16))
flux_sim_plot
dev.off()
tiff("sens_ratio_simple.tiff", units="in", width=5, height=5, res=300)
flux_sim_plot <- ggplot(df, aes(x = model, y = ratio))+
geom_point()+geom_line()+geom_hline(yintercept = 1, linetype="dashed")+
annotate("text", x=0.98, y=1.2, label= expression(U[d]~"= 2"~s[b]~"= 0.03"))+
labs(x= "Model", y = expression("Sensitivity ratio at "~N[crit]))+
lims(y=c(0.8, 1))+theme_Publication()+theme(text = element_text(size = 16))
flux_sim_plot
dev.off()
tiff("sens_ratio_simple.tiff", units="in", width=5, height=5, res=300)
flux_sim_plot <- ggplot(df, aes(x = model, y = ratio))+
geom_pointpath()+geom_line()+geom_hline(yintercept = 1, linetype="dashed")+
annotate("text", x=0.98, y=1.2, label= expression(U[d]~"= 2"~s[b]~"= 0.03"))+
labs(x= "Model", y = expression("Sensitivity ratio at "~N[crit]))+
lims(y=c(0.8, 1))+theme_Publication()+theme(text = element_text(size = 16))
flux_sim_plot
tiff("sens_ratio_simple.tiff", units="in", width=5, height=5, res=300)
flux_sim_plot <- ggplot(df, aes(x = model, y = ratio))
tiff("sens_ratio_simple.tiff", units="in", width=5, height=5, res=300)
flux_sim_plot <- ggplot(df, aes(x = model, y = ratio))+
geom_pointrange()+geom_line()+geom_hline(yintercept = 1, linetype="dashed")+
annotate("text", x=0.98, y=1.2, label= expression(U[d]~"= 2"~s[b]~"= 0.03"))+
labs(x= "Model", y = expression("Sensitivity ratio at "~N[crit]))+
lims(y=c(0.8, 1))+theme_Publication()+theme(text = element_text(size = 16))
flux_sim_plot
df
id<-c(1:5)
after<-c(35.69, 38.96, 33.10, 27.11, 36.55)
before<-c(35.96, 39.70, 33.85, 27.92, 38.38)
df<-data.frame(id, after,before)
df
df <- data.frame(id, after,before) %>%
pivot_longer(cols = c("after", "before"),
names_to = "time")
library(tidyverse)
df <- data.frame(id, after,before) %>%
pivot_longer(cols = c("after", "before"),
names_to = "time")
df
ggplot(data = df,
aes(x = time,
y = value,
group = id,
color = factor(id))) +
geom_line(size = 2,
alpha = 0.5) +
geom_point(size = 3)
p <- ggplot(data = df,
aes(x = time,
y = value,
group = id,
color = factor(id))) +
geom_line(size = 2,
alpha = 0.5) +
geom_point(size = 3)
p
flux_sim_plot <- ggplot(df, aes(x = model, y = ratio))+
geom_pointrange()+geom_line()+geom_hline(yintercept = 1, linetype="dashed")+
annotate("text", x=0.98, y=1.2, label= expression(U[d]~"= 2"~s[b]~"= 0.03"))+
labs(x= "Model", y = expression("Sensitivity ratio at "~N[crit]))+
lims(y=c(0.8, 1))+theme_Publication()+theme(text = element_text(size = 16))
flux_sim_plot
######simple linkage effect#######
df <- data.frame("ratio" = c(0.85362, 0.9772939))
df$model <- factor(c("No Linkage", "Linkage"),
levels = c("No Linkage", "Linkage"))
flux_sim_plot <- ggplot(df, aes(x = model, y = ratio))+
geom_pointrange()+geom_line()+geom_hline(yintercept = 1, linetype="dashed")+
annotate("text", x=0.98, y=1.2, label= expression(U[d]~"= 2"~s[b]~"= 0.03"))+
labs(x= "Model", y = expression("Sensitivity ratio at "~N[crit]))+
lims(y=c(0.8, 1))+theme_Publication()+theme(text = element_text(size = 16))
flux_sim_plot
flux_sim_plot <- ggplot(df, aes(x = model, y = ratio))+
geom_point()+geom_line()+geom_hline(yintercept = 1, linetype="dashed")+
annotate("text", x=0.98, y=1.2, label= expression(U[d]~"= 2"~s[b]~"= 0.03"))+
labs(x= "Model", y = expression("Sensitivity ratio at "~N[crit]))+
lims(y=c(0.8, 1))+theme_Publication()+theme(text = element_text(size = 16))
flux_sim_plot
log10(-2.75)
log10(2.75)
10^-2.75
log10(0.001778279)
log10(0.002)
#######set preferred theme########
theme_Publication <- function(base_size=14, base_family="Times New Roman") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
legend.spacing = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
scale_fill_Publication <- function(...){
library(scales)
discrete_scale("fill","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
scale_colour_Publication <- function(...){
library(scales)
discrete_scale("colour","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
library(ggplot2)
library(extrafont)
loadfonts(device = "win")
library(gridExtra)
#############
df <- data.frame("nolinkage" = c(0.845398, 0.857697, 0.878588, 0.916017),
"linkage" = c(0.886792, 0.8938948, 1.038609, 1.182704))
df$sb <- factor(c("0.002", "0.004","0.008", "0.016"),
levels = c("0.002", "0.004","0.008", "0.016"))
tiff("sens_ratio.tiff", units="in", width=5, height=5, res=300)
flux_sim_plot <- ggplot(df, aes(x = nolinkage, y = linkage, color=sb))+
geom_point()+geom_hline(yintercept = 1, linetype="dashed")+geom_abline(intercept = 0, slope = 1, linetype="dotted")+
annotate("text", x=0.95, y=0.8, label= expression(U[d]~"= 2"~U[b]~"= 0.008"))+
annotate("text", x=0.97, y=0.96, label= "1:1 ratio",angle=20)+
labs(x= expression("Sensitivity ratio at "~N[crit]~" with no linkage"),
y = expression("Sensitivity ratio at "~N[crit]~" with linkage"), color = "Mean sb")+
lims(x=c(0.8, 0.98), y=c(0.8, 1.25))+theme_Publication()+theme(text = element_text(size = 16))
flux_sim_plot
dev.off()
log10(0.008)
tiff("sens_ratio.tiff", units="in", width=5, height=5, res=300)
flux_sim_plot <- ggplot(df, aes(x = nolinkage, y = linkage, color=sb))+
geom_point()+geom_hline(yintercept = 1, linetype="dashed")+geom_abline(intercept = 0, slope = 1, linetype="dotted")+
annotate("text", x=0.95, y=0.8, label= expression(U[d]~"= 2"~U[b]~"= 0.008"))+
annotate("text", x=0.97, y=0.96, label= "1:1 ratio",angle=20)+
labs(x= expression("Sensitivity ratio at "~N[crit]~" with no linkage"),
y = expression("Sensitivity ratio at "~N[crit]~" with linkage"), color = "sb")+
lims(x=c(0.8, 0.98), y=c(0.8, 1.25))+theme_Publication()+theme(text = element_text(size = 16))
flux_sim_plot
dev.off()
tiff("sens_ratio.tiff", units="in", width=5, height=5, res=300)
flux_sim_plot <- ggplot(df, aes(x = nolinkage, y = linkage, color=sb))+
geom_point()+geom_abline(intercept = 0, slope = 1, linetype="dotted")+
annotate("text", x=0.95, y=0.8, label= expression(U[d]~"= 2"~U[b]~"= 0.008"))+
annotate("text", x=0.97, y=0.96, label= "1:1 ratio",angle=20)+
labs(x= expression("Sensitivity ratio at "~N[crit]~" with no linkage"),
y = expression("Sensitivity ratio at "~N[crit]~" with linkage"), color = "sb")+
lims(x=c(0.8, 0.98), y=c(0.8, 1.25))+theme_Publication()+theme(text = element_text(size = 16))
flux_sim_plot
dev.off()
tiff("sens_ratio.tiff", units="in", width=5, height=5, res=300)
flux_sim_plot <- ggplot(df, aes(x = nolinkage, y = linkage, color=sb))+
geom_point()+geom_abline(intercept = 0, slope = 1, linetype="dotted")+
annotate("text", x=0.95, y=0.8, label= expression(U[d]~"= 2"~U[b]~"= 0.008"))+
annotate("text", x=0.97, y=0.96, label= "1:1 ratio",angle=20)+
labs(x= expression("Sensitivity ratio at "~N[crit]~" with no linkage"),
y = expression("Sensitivity ratio at "~N[crit]~" with linkage"), color = expression(s[b]))+
lims(x=c(0.8, 0.98), y=c(0.8, 1.25))+theme_Publication()+theme(text = element_text(size = 16))
flux_sim_plot
dev.off()
